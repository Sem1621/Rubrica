@page "/utente"
@page "/registra"
@namespace Components.Pages
@using Microsoft.AspNetCore.Components.Forms
@using System.Text.Json
@using System.Linq
@using Microsoft.EntityFrameworkCore
@using Rubrica.Data
@using Rubrica.helper
@inject IJSRuntime JS
@inject IDbContextFactory<DataContext> DbFactory
@inject State stato

@if(getPage() == "registra")
{
	<div class="wrapper fadeInDown">
	  <div id="formContent">
		<!-- Tabs Titles -->

		<!-- Login Form -->
		<EditForm Model="@utente" OnValidSubmit="@Register">
			<input type="text" id="surname" class="fadeIn second"  @bind-value="utente.Surname" name="login" placeholder="surname">
			<input type="text" id="name" class="fadeIn third" name="login" @bind-value="utente.Name" placeholder="name">
			<input type="submit" class="fadeIn fourth">
		</EditForm>

	  </div>
	</div>
}
else if(getPage() == "utente")
{
	<div class="wrapper fadeInDown">
	  <div id="formContent">
		<!-- Tabs Titles -->

		<!-- Login Form -->
		<EditForm Model="@utente" OnValidSubmit="@Login">
			<input type="text" id="surname" class="fadeIn second"  @bind-value="utente.Surname" name="login" placeholder="surname">
			<input type="text" id="name" class="fadeIn third" name="login" @bind-value="utente.Name" placeholder="name">
			@if (displayError)
			{
					<p style="color: red;">utente non trovato</p>
			}
			<input type="submit" class="fadeIn fourth">
		</EditForm>
	  </div>
	</div>
	
}




@code{
	[Inject]
	private NavigationManager navManager { get; set; }
	private Utente? utente = new Utente();

	private bool displayError = false;

	protected override void  OnInitialized()
	{

		base.OnInitialized();
		var page = getPage();
	}

	private string getPage()
	{
		var page = navManager.ToBaseRelativePath(navManager.Uri);
		return page;
	}

	private async Task Register()
	{
		try
		{
			var context = DbFactory.CreateDbContext();
			Utente nuovoUtente = utente;
			if(nuovoUtente != null)
				context.Utente.Add(nuovoUtente);
			context.SaveChanges();
			context.Dispose();
		}
		catch
		{

		}
		finally
		{
			navManager.NavigateTo("lista");
		}
	}

	private async Task Login()
	{
		bool esiste;
		try
		{
			var context = DbFactory.CreateDbContext();
			var ricercaUtente = context.Utente
				.Where(u => u.Name == utente.Name && u.Surname == utente.Surname);
			if (ricercaUtente.Count() > 0)
			{
				stato.utenteLoggato = ricercaUtente.First();
				navManager.NavigateTo("lista");
			}
			else
			{
				displayError = true;
			}

			context.Dispose();
		}
		catch
		{

		}
	}

}
