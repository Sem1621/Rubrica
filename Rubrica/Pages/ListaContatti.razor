@page "/lista"
@using Microsoft.EntityFrameworkCore
@using Data
@using Rubrica.helper
@inject IDbContextFactory<DataContext> DbFactory
@inject State stato
<h3>ListaContatti</h3>
<div class="container mycontainer">
@if(contatti != null && stato.utenteLoggato != null){
	@foreach (var contatto in contatti){
		<div class="contacts">
			<div class="card contact-card" style="width: 18rem;">
			 <img class="card-img-top user-img" src="./images/user_img.png" alt="Card image cap">
				<div class="card-body">
					<ul class="list-group list-group-flush">
						<li class="list-group-item">
							<span class="data-label">Telefono: </span>
							<p class="text-data">@contatto.telefono</p>
						</li>
						<li class="list-group-item">
							<span class="data-label">Email: </span>
							<p class="text-data">@contatto.email</p>
						</li>
					</ul>
					<button class="btn btn-danger" vlaue="@contatto" onclick="">Delete</button>
				</div>
			</div>
		</div>
		
	}
}
else {
	<p>contatti non trovati</p>
}
</div>


@code {
	private List<TipoContatto> contatti;
	protected override void OnInitialized()
	{
		base.OnInitialized();
		try
		{
			var context = DbFactory.CreateDbContext();
			contatti = context.Contacts
			.Where(c => c.utente == stato.utenteLoggato)
			.Join(context.TipoContatto,
				c  => c.tipoContatto.Id,
				tc => tc.Id,
				(contacts,tipoContatto) => new TipoContatto
				{
					email = tipoContatto.email,
					telefono = tipoContatto.telefono
				}
				)
				.ToList();
			context.Dispose();
		}
		catch
		{

		}
	}

	private void Delete(int idContatto)
	{
		try
		{
			//var context = DbFactory.CreateDbContext();
			//var contattoCollegato = context.Contacts.Where(c =>
			//	c.utente.Id == stato.utenteLoggato.Id && c.tipoContatto.Id == idContatto);
			//context.Remove(contattoCollegato);
			//context.TipoContatto.Find(contatto);
		}
		catch
		{
		}
	}
}
